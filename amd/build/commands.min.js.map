{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_translations plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getUnusedHash} from './options';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    return (editor) => {\n        if (editor.getElement().id === 'id_substitutetext_editor') {\n            // Do not add tranlation hashes to translations.\n            return;\n        }\n\n        let translationHashElement;\n\n        // Add a handler to set up the translation hash when the content is initialised.\n        editor.on('init', () => {\n            const newTranslationHash = getUnusedHash(editor);\n\n            if (!newTranslationHash) {\n                // There is no translation has to use for this field.\n                return;\n            }\n\n            translationHashElement = editor.getBody().querySelector('[data-translationhash]');\n            // Ensure that the hash element has a name.\n            // This ensures that TinyMCE sees it as non-empty content, and therefore does not remove it.\n            if (translationHashElement) {\n                translationHashElement.setAttribute('name', 'translationhash');\n            } else {\n                translationHashElement = document.createElement('span');\n                translationHashElement.dataset.translationhash = newTranslationHash;\n                translationHashElement.setAttribute('name', 'translationhash');\n\n                editor.getBody().prepend(translationHashElement);\n            }\n        });\n\n        // Add a handler to unset the content if it only contains the translation hash.\n        editor.on('submit', () => {\n            if (editor.getContent() === translationHashElement.outerHTML) {\n                editor.setContent('');\n            }\n        });\n    };\n};\n"],"names":["async","editor","getElement","id","translationHashElement","on","newTranslationHash","getBody","querySelector","setAttribute","document","createElement","dataset","translationhash","prepend","getContent","outerHTML","setContent"],"mappings":"4LAiCwBA,SACZC,YAC2B,6BAA3BA,OAAOC,aAAaC,cAKpBC,uBAGJH,OAAOI,GAAG,QAAQ,WACRC,oBAAqB,0BAAcL,QAEpCK,qBAKLF,uBAAyBH,OAAOM,UAAUC,cAAc,0BAGpDJ,uBACAA,uBAAuBK,aAAa,OAAQ,oBAE5CL,uBAAyBM,SAASC,cAAc,QAChDP,uBAAuBQ,QAAQC,gBAAkBP,mBACjDF,uBAAuBK,aAAa,OAAQ,mBAE5CR,OAAOM,UAAUO,QAAQV,6BAKjCH,OAAOI,GAAG,UAAU,KACZJ,OAAOc,eAAiBX,uBAAuBY,WAC/Cf,OAAOgB,WAAW"}